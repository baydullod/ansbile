- name: Install Apache HTTPD from Source
  hosts: all
  become: yes
  vars:
    apache_version: "2.4.63"
    apr_version: "1.7.5"
    apr_util_version: "1.6.3"
    apache_url: "https://downloads.apache.org/httpd/httpd-{{ apache_version }}.tar.gz"
    apr_url: "https://downloads.apache.org/apr/apr-{{ apr_version }}.tar.gz"
    apr_util_url: "https://downloads.apache.org/apr/apr-util-{{ apr_util_version }}.tar.gz"
    install_prefix: "/usr/local/apache2"

  tasks:
    - name: Install required dependencies
      apt:
        name:
          - build-essential
          - libpcre3
          - libpcre3-dev
          - libssl-dev
          - zlib1g-dev
          - perl
          - wget
          - tar
          - make
          - autoconf
          - libtool
          - pkg-config
          - uuid-dev
          - libxml2-dev
          - libexpat1-dev
          - libnghttp2-dev
        state: present
        update_cache: yes

    - name: Download Apache HTTPD source
      get_url:
        url: "{{ apache_url }}"
        dest: "/usr/src/httpd-{{ apache_version }}.tar.gz"
        mode: '0644'

    - name: Extract Apache HTTPD source
      ansible.builtin.unarchive:
        src: "/usr/src/httpd-{{ apache_version }}.tar.gz"
        dest: "/usr/src/"
        remote_src: yes
      args:
        creates: "/usr/src/httpd-{{ apache_version }}"

    - name: Download APR and APR-Util
      get_url:
        url: "{{ item.url }}"
        dest: "/usr/src/{{ item.name }}.tar.gz"
        mode: '0644'
      loop:
        - { url: "{{ apr_url }}", name: "apr" }
        - { url: "{{ apr_util_url }}", name: "apr-util" }

    - name: Extract APR and APR-Util
      ansible.builtin.unarchive:
        src: "/usr/src/{{ item.src }}"
        dest: "/usr/src/httpd-{{ apache_version }}/srclib/"
        remote_src: yes
      loop:
        - { src: "apr.tar.gz", name: "apr-{{ apr_version }}" }
        - { src: "apr-util.tar.gz", name: "apr-util-{{ apr_util_version }}" }
      args:
        creates: "/usr/src/httpd-{{ apache_version }}/srclib/{{ item.name }}"

    - name: Ensure APR is correctly named
      command: mv "/usr/src/httpd-{{ apache_version }}/srclib/apr-{{ apr_version }}" "/usr/src/httpd-{{ apache_version }}/srclib/apr"
      args:
        removes: "/usr/src/httpd-{{ apache_version }}/srclib/apr-{{ apr_version }}"
        creates: "/usr/src/httpd-{{ apache_version }}/srclib/apr"
      ignore_errors: yes  # Ignore error if already correct

    - name: Ensure APR-Util is correctly named
      command: mv "/usr/src/httpd-{{ apache_version }}/srclib/apr-util-{{ apr_util_version }}" "/usr/src/httpd-{{ apache_version }}/srclib/apr-util"
      args:
        removes: "/usr/src/httpd-{{ apache_version }}/srclib/apr-util-{{ apr_util_version }}"
        creates: "/usr/src/httpd-{{ apache_version }}/srclib/apr-util"
      ignore_errors: yes  # Ignore error if already correct

    - name: Configure Apache HTTPD
      command:
        cmd: "./configure --prefix={{ install_prefix }} --enable-so --enable-ssl --enable-rewrite --with-included-apr --with-pcre=/usr"
      args:
        chdir: "/usr/src/httpd-{{ apache_version }}"
        creates: "/usr/src/httpd-{{ apache_version }}/Makefile"

    - name: Compile Apache HTTPD
      command:
        cmd: "make -j{{ ansible_processor_vcpus }}"
      args:
        chdir: "/usr/src/httpd-{{ apache_version }}"
        creates: "/usr/src/httpd-{{ apache_version }}/httpd"

    - name: Install Apache HTTPD
      command:
        cmd: "make install"
      args:
        chdir: "/usr/src/httpd-{{ apache_version }}"
        creates: "{{ install_prefix }}/bin/httpd"

    - name: Create systemd service for Apache
      copy:
        dest: "/etc/systemd/system/apache2.service"
        mode: '0644'
        content: |
          [Unit]
          Description=Apache HTTP Server
          After=network.target

          [Service]
          Type=forking
          ExecStart={{ install_prefix }}/bin/apachectl -k start
          ExecStop={{ install_prefix }}/bin/apachectl -k stop
          ExecReload={{ install_prefix }}/bin/apachectl -k graceful
          PIDFile={{ install_prefix }}/logs/httpd.pid
          PrivateTmp=true

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start Apache service
      systemd:
        name: apache2
        enabled: yes
        state: started
